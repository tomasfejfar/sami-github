{% macro class_item(class, short = false, indent = "") -%}
{% import _self as macros -%}
{{ indent }}- {{ macros.class_name(class, short) }}{% if class.shortdesc %} &mdash; {{ class.shortdesc }}{% endif %}
{%- endmacro -%}

{% macro class_full(class) %}
{% import _self as macros -%}
{%- set parts = class|split("\\") -%}
{%- set path = parts|slice(0, -1)|join("\\") -%}
{%- set name = parts|slice(-1, 1)|join("\\") -%}
```php
{{ class.final ? 'final ' : ''}}{{ macros.class_type(class) }} {{ path }}\{{ name }}
{% if class.parent %}
    extends
        {{ macros.class_name(class.parent, false) }},
{% endif %}
{% if class.interfaces|length > 0 %}
    implements
{% for interface in class.interfaces %}
        {{ macros.class_name(interface, false) }}
{% endfor %}
{% endif %}
```
{% endmacro %}

{% macro class_name(class, short = false, suffix = "") -%}
{% import _self as macros -%}
{% spaceless -%}
{% if class.projectclass or class.phpclass %}
[`{{ short ? class.shortname : class }}{{ suffix }}`]({% if class.projectclass %}{{ macros.markdown_path(class_path(class)) }}{% else %}http://php.net/class.{{ class }}{% endif %})
{% else %}
`{{ class }}`
{% endif %}
{%- endspaceless %}
{%- endmacro -%}

{% macro class_type(class, sentence = false) -%}
{% spaceless %}
{% if class.interface %}
{% if sentence %}an {% endif %}
interface
{%- else -%}
{% if sentence %}{% if class.abstract %}an{% else %}a{% endif %} {% endif %}
{% if class.abstract %}abstract {% endif %}
class
{%- endif -%}
{% endspaceless %}
{%- endmacro -%}

{% macro hint(hint) -%}
{% import _self as macros -%}
{% spaceless %}
{% if hint.class -%}
{{ macros.class_name(hint.name, true, hint.array ? "[]" : "") }}
{%- elseif hint.name -%}
`{{ hint.name }}{% if hint.array %}[]{% endif %}`
{%- endif %}
{% endspaceless %}
{%- endmacro -%}

{% macro markdown_path(path) -%}
{% spaceless %}
{{- path|replace({".html": ".md"}) -}}
{% endspaceless %}
{%- endmacro -%}

{% macro method_signature(method) %}
    {% import _self as macros -%}
    {% spaceless %}
        {% set abstract = method.abstract ? 'abstract ' : '' %}
        {% set final = method.final ? 'final ' : '' %}
        {% set visibility = macros.member_visibility(method) ~ ' ' %}
        {% set parameters = '' %}
        {% if method.parameters %}
            {% for parameter in method.parameters %}
                {% set parameters = parameters ~ macros.parameter_signature(parameter) %}
                {% if not loop.last %}
                    {% set parameters = parameters ~ ',' %}
                {% endif %}
            {% endfor %}
        {% endif %}
        {{ abstract }}{{ visibility }}function {{ method.name }}({{ parameters }}) :
    {% endspaceless %}
{% endmacro %}

{% macro parameter_signature(parameter) %}
    {%- spaceless %}
        {% import _self as macros -%}
        {% set hint = '' %}
        {% if parameter.hint %}
            {% for hint in parameter.hint %}
                {% set hint = hint ~ macros.hint(hint) %}
                {% if not loop.last %}
                    {% set hint = hint ~ '|' %}
                {% endif %}
            {% endfor %}
        {% endif %}
        {{ hint }}${{ parameter.name }}
    {% endspaceless -%}
{% endmacro %}

{% macro member_signature(type, member) -%}
{% import _self as macros -%}
- It is a **{{ macros.member_visibility(member) }}{% if member.abstract is defined and member.abstract %} abstract{% endif %}** {{ type }}.
{% if member.final %}
- It is a **finalized** {{ type }}.
{% endif %}
{% if "property" == type %}
{% if member.hint|length > 1 %}
- It can be one of the following types:
{%- for hint in member.hint %}

    - {{ macros.hint(hint) }}
{%- endfor -%}
{%- elseif member.hint|length > 0 %}
- It is a(n) {{ macros.hint(member.hint[0]) }} value.
{%- else %}
- Its type is not specified.
{% endif %}
{% elseif "method" == type %}
{% if member.parameters %}
- It accepts the following parameter(s):
{% for parameter in member.parameters %}
    - `${{ parameter.name }}`{% if parameter.hint %} ({% for hint in parameter.hint %}{{ macros.hint(hint) }}{% if not loop.last %}|{% endif %}{% endfor %}){% endif %}{% if parameter.shortdesc %} &mdash; {{ parameter.shortdesc }}{% endif %}

{% endfor %}
{% endif %}
{% if (member.hint|length > 1) or member.hintDesc %}
{% if member.hintDesc %}
- _Returns:_ {{ member.hintDesc }}
{% else %}
- It can return one of the following values:
{% endif %}
{% for hint in member.hint %}
    - {{ macros.hint(hint) }}
{% endfor -%}
{% elseif member.hint|length > 0 %}
- It returns a(n) {{ macros.hint(member.hint[0]) }} value.
{% else %}
- It does not return anything.
{% endif %}
{% if member.exceptions %}
- It throws one of the following exceptions:
{% for exception in member.exceptions %}
    - {{ macros.class_name(exception[0]) }}{% if exception[1] is defined and exception[1] is not empty %} &mdash; {{ exception[1] }}{% endif %}

{% endfor %}
{% endif %}
{% endif %}
{%- endmacro -%}

{% macro member_visibility(member) -%}
{% spaceless %}
{% if member.private %}private{% elseif member.protected %}protected{% else %}public{% endif %}
{% if member.static %} static{% endif %}
{% endspaceless %}
{%- endmacro -%}
